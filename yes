using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ForlornApi;
using System.Diagnostics;
using System.Threading;
using Timer = System.Windows.Forms.Timer;

namespace winforms
{
    public partial class Form1 : Form
    {
        private Mutex mutex = null;
        private bool mutexCreated = false;
        private bool suppressTextChangedEvent = false;
        private Timer fadeTimer;
        public Form1()
        {
            InitializeComponent();
            this.Load += Form1_Load;
            this.FormClosed += Form1_FormClosed;

            Timer time = new Timer();
            time.Tick += timertick;
            time.Start();

            this.Opacity = 0;
            fadeTimer = new Timer();
            fadeTimer.Interval = 30;
            fadeTimer.Tick += new EventHandler(FadeTimer_Tick);
            fadeTimer.Start();

            CreateMutex();
        }



        private void FadeTimer_Tick(object sender, EventArgs e)
        {
            if (this.Opacity < 1)
            {
                this.Opacity += 0.05;
                if (this.Opacity < 0) this.Opacity = 1;
            }
            else
            {
                fadeTimer.Stop();
                fadeTimer.Dispose();
                fadeTimer = null;
            }
        }


        private void UpdateRichTextBoxSize()
        {
            if (guna2Panel4.Visible)
            {
                richTextBox1.Size = new Size(guna2Panel4.Width, guna2Panel4.Height);

            }
            else
            {
                richTextBox1.Size = new Size(300, 150); 
            }
        }




        // Helper method to append text with a timestamp to the console (guna2TextBox1)
        private void AppendTextWithTimestamp(string message)
        {
            string timestamp = DateTime.Now.ToString("[HH:mm:ss]");
            if (guna2TextBox1.InvokeRequired)
            {
                guna2TextBox1.Invoke((MethodInvoker)(() =>
                {
                    SuppressTextChanged(() =>
                    {
                        guna2TextBox1.AppendText($"{timestamp} {message}{Environment.NewLine}");
                    });
                }));
            }
            else
            {
                SuppressTextChanged(() =>
                {
                    guna2TextBox1.AppendText($"{timestamp} {message}{Environment.NewLine}");
                });
            }
        }

        // Suppresses the TextChanged event temporarily
        private void SuppressTextChanged(Action action)
        {
            suppressTextChangedEvent = true; // Suppress the event
            action();
            suppressTextChangedEvent = false; // Re-enable the event
        }




        private async void timertick(object sender, EventArgs e)
        {

            if (this.Text != this.Width.ToString() + "x" + this.Height.ToString())
            {
                this.Text = this.Width.ToString() + "x" + this.Height.ToString();

                suppressTextChangedEvent = true;
                suppressTextChangedEvent = false;
            }





            if (ForlornApi.Api.IsRobloxOpen())
            {
                await Task.Delay(1250);
                label1.Text = "Roblox process found";
            }

            else
            {
                await Task.Delay(750);
                label1.Text = "  Roblox not found";
            }



            if (guna2Panel6.Visible)
            {
                richTextBox1.Size = new Size(1, 1);
                guna2TextBox1.Size = new Size(625, 122);
                guna2Panel4.Size = new Size(638, 122);
                guna2Panel5.Size = new Size(1625, 335);

                guna2Panel5.FillColor = Color.FromArgb(12, 12, 12);
                richTextBox1.BackColor = Color.FromArgb(12, 12, 12);
                guna2TextBox1.BackColor = Color.FromArgb(12, 12, 12);
            }
            else
            {
                richTextBox1.Size = new Size(625, 343);
                guna2TextBox1.Size = new Size(634, 122);
                guna2Panel4.Size = new Size(634, 122);
            }



            if (guna2Panel4.Visible)
            {
                richTextBox1.Size = new Size(625, 235);

            }
            else
            {
                richTextBox1.Size = new Size(625, 343);
            }



            if (consoleToolStripMenuItem.Checked)
            {
                guna2Panel4.Visible = true;
                guna2TextBox1.Visible = true;
                guna2Panel11.Visible = true;
            }
            else
            {
                guna2Panel4.Visible = false;
                guna2Panel11.Visible = false;
                guna2TextBox1.Visible = false;
            }
        }


        private void guna2Button1_Click(object sender, EventArgs e)
        {
            AppendTextWithTimestamp("Working");
            guna2Panel4.Visible = true;
        }

        private void guna2Button19_Click(object sender, EventArgs e)
        {
            if (ForlornApi.Api.IsRobloxOpen())
            {
                ForlornApi.Api.Inject();
                guna2Panel5.Visible = true;
                richTextBox1.Visible = true;
                guna2TextBox1.Visible = true;
                guna2Button1.Visible = true;
                guna2Panel4.Visible = true;
                this.Text = "Ravy - 80% UNC";
            }
            else
            {
                AppendTextWithTimestamp("Roblox process not found.");
            }

            if (ForlornApi.Api.IsInjected())
            {
                MessageBox.Show("Already attached!");
            }
            else
            {

            }



            if (guna2TextBox1.Visible == true)
            {
                AppendTextWithTimestamp("Exec - button clicked!" +
"");
            }
            else
            {

            }
        }

        private async void guna2Button23_Click(object sender, EventArgs e)
        {
            richTextBox1.Text = "";
            AppendTextWithTimestamp("Script cleared." +
                " ");
        }

        private void guna2Button21_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "Txt Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";
            dialog.Title = "Select file";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    string filePath = dialog.FileName;
                    string fileContent = File.ReadAllText(filePath);
                    richTextBox1.Text = fileContent;
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private async void guna2Button22_Click(object sender, EventArgs e)
        {
            try
            {
                SaveFileDialog saveFileDialog1 = new SaveFileDialog
                {
                    Filter = "Lua Files (*.lua)|*.lua|Text Files (*.txt)|*.txt",
                    DefaultExt = "lua",
                    Title = "Save Lua or Text File"
                };

                if (saveFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    File.WriteAllText(saveFileDialog1.FileName, richTextBox1.Text);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error saving file: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void guna2Button20_Click(object sender, EventArgs e)
        {
            this.TopMost = true;
            richTextBox1.Refresh();
            richTextBox1.Update();
        }

        private async void guna2Button24_Click(object sender, EventArgs e)
        {
            if ((ForlornApi.Api.IsRobloxOpen()))
            {
                ForlornApi.Api.ExecuteScript(richTextBox1.Text);
                AppendTextWithTimestamp("Script already executed." +
                    "");
            }

            else
            {

            }
        }

        private void guna2Button17_Click(object sender, EventArgs e)
        {
            WindowState = FormWindowState.Minimized;
        }

        private void guna2Button16_Click(object sender, EventArgs e)
        {
            
        }

        private async void guna2Button18_Click(object sender, EventArgs e)
        {
            mutex.Close();
            await Task.Delay(250);
            Application.Exit();
        }

        private void joinDiscordToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("https://discord.gg/ZvUxPf26");
        }

        private void topmostToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.TopMost = true;
        }

        private void goBackToolStripMenuItem_Click(object sender, EventArgs e)
        {
            richTextBox1.Refresh();
        }

        private async void owlHubToolStripMenuItem_Click(object sender, EventArgs e)
        {
            richTextBox1.Text = "loadstring(game:HttpGet(“https://raw.githubusercontent.com/CriShoux/OwlHub/master/OwlHub.txt”))(); `);";
        }

        private async void clearToolStripMenuItem_Click(object sender, EventArgs e)
        {
            richTextBox1.Text = "";
        }

        private async void executeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if ((ForlornApi.Api.IsRobloxOpen()))
            {
                string rawScript = "loadstring(game:HttpGet('https://raw.githubusercontent.com/unified-naming-convention/NamingStandard/main/UNCCheckEnv.lua', true))()";
                ForlornApi.Api.ExecuteScript(rawScript);
            }

            else
            {

            }
        }

        private void openFIleToolStripMenuItem1_Click(object sender, EventArgs e)
        {

        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (ForlornApi.Api.IsRobloxOpen())
            {
                ForlornApi.Api.Inject();
                guna2Panel5.Visible = true;
                richTextBox1.Visible = true;
                guna2Button1.Visible = true;
            }
            else
            {
                
            }
        }

        private async void executeFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            
        }

        private async void saveFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                SaveFileDialog saveFileDialog1 = new SaveFileDialog
                {
                    Filter = "Lua Files (*.lua)|*.lua|Text Files (*.txt)|*.txt",
                    DefaultExt = "lua",
                    Title = "Save Lua or Text File"
                };

                if (saveFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    File.WriteAllText(saveFileDialog1.FileName, richTextBox1.Text);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error saving file: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void infiniteYieldToolStripMenuItem_Click(object sender, EventArgs e)
        {
           richTextBox1.Text = "loadstring(game:HttpGet(‘https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source’))() `);";
        }

        private async void espGUIToolStripMenuItem_Click(object sender, EventArgs e)
        {
            richTextBox1.Text = "loadstring(game:HttpGet(“https://raw.githubusercontent.com/tbao143/thaibao/refs/heads/main/Show%20esp.lua“))() `);";
        }

        private void guna2Button11_Click(object sender, EventArgs e)
        {
            if (this.TopMost == true)
            {
                AppendTextWithTimestamp("Topmost is enabled");
            }

            else
            {
                AppendTextWithTimestamp("Topmost not enabled");
            }
        }

        private void guna2Button12_Click(object sender, EventArgs e)
        {
            if (guna2Panel4.Visible == true)
            {
                if (guna2TextBox1.Visible == true)
                {
                    guna2TextBox1.Text = this.Text;
                }
            }
            else
            {
                AppendTextWithTimestamp("Click to <<console button>> and inject");
            }
        }

        private void guna2Button13_Click(object sender, EventArgs e)
        {
            Scripts mainForm = new Scripts();
            mainForm.Show();
        }

        private void guna2Button14_Click(object sender, EventArgs e)
        {
            if (guna2Panel4.Visible == true)
            {
                MessageBox.Show("Printed to console");
                guna2TextBox1.Text = this.Text;
            }
            else
            {
                MessageBox.Show("Click to <<console button>> and inject");
            }
        }

        private void guna2Button10_Click(object sender, EventArgs e)
        {
            Vortiex mainForm = new Vortiex();
            mainForm.Show();
        }

        private void guna2Button15_Click(object sender, EventArgs e)
        {
            MessageBox.Show("ravyexec");
        }

        private void guna2Button2_Click(object sender, EventArgs e)
        {
            guna2Panel4.Visible = false;
        }

        private void guna2Button3_Click(object sender, EventArgs e)
        {
            guna2Panel4.Visible = false;
        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void guna2Panel3_Paint(object sender, PaintEventArgs e)
        {
             
        }

        private void guna2Button4_Click(object sender, EventArgs e)
        {
            richTextBox1.Visible = true;
            guna2Panel3.BringToFront();
            guna2Panel6.SendToBack();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            CreateMutex();
        }

        private void guna2CustomCheckBox1_Click(object sender, EventArgs e)
        {

        }

        private void guna2Panel6_Paint(object sender, PaintEventArgs e)
        {

        }

        private void guna2CustomCheckBox3_Click(object sender, EventArgs e)
        {

        }

        private void guna2CustomCheckBox3_Click_1(object sender, EventArgs e)
        {
            
        }

        private void label7_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void guna2CustomCheckBox4_Click(object sender, EventArgs e)
        {

        }

        private void guna2Panel2_Paint(object sender, PaintEventArgs e)
        {

        }

        private void guna2Panel4_Paint(object sender, PaintEventArgs e)
        {

        }

        private void Editor5_Click(object sender, EventArgs e)
        {

        }

        private void guna2Panel5_Paint(object sender, PaintEventArgs e)
        {

        }

        private void consoleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            
        }

        private void guna2Button6_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Version-1.2, Creator: @pre-hacker / @hm-sploit, Exec: ravyexec", "Executor", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void guna2Button8_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("https://getravy.framer.website");
        }

        private void guna2Button9_Click(object sender, EventArgs e)
        {
            
        }

        private void richTextBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void guna2Button9_Click_1(object sender, EventArgs e)
        {
            Apps apps = new Apps();
            apps.Show();
        }

        private void multiRobloxToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            ReleaseMutex();
        }


        private void CreateMutex()
        {
            try
            {
                mutex = new Mutex(false, "ROBLOX_singletonMutex");
                mutexCreated = mutex.WaitOne(0, false);


                if (!mutexCreated)
                {
                    return;
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ravy Best free exec: {ex.Message}", "Info", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Application.Exit();
                return;
            }
        }
        private void ReleaseMutex()
        {
            if (mutex != null && mutexCreated)
            {
                try
                {
                    mutex.ReleaseMutex();

                }
                catch (Exception ex)
                {
                    
                }
                finally
                {
                    mutex.Close();
                    mutex = null;
                }

            }
        }
    }
}
